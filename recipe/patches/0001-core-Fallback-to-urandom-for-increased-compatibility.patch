From 4e202e50c9ee44747e60780e7d1a589ee16a3b6a Mon Sep 17 00:00:00 2001
From: Vincenzo Eduardo Padulano <vincenzo.eduardo.padulano@cern.ch>
Date: Mon, 6 May 2024 11:01:58 +0200
Subject: [PATCH] [core] Fallback to urandom for increased compatibility

Systems with older versions of glibc do not have modern functions to get
cryptographically secure random numbers. Introduce a fallback to using
`/dev/urandom` in such cases. A notable example is the conda-build environment
which is based on Centos7 where the glibc version is 2.17
---
 core/unix/CMakeLists.txt      | 29 ++++++++++++++++++++++++++++-
 core/unix/src/TUnixSystem.cxx |  6 ++++++
 2 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/core/unix/CMakeLists.txt b/core/unix/CMakeLists.txt
index 49502f1a6c..9e432095f3 100644
--- a/core/unix/CMakeLists.txt
+++ b/core/unix/CMakeLists.txt
@@ -51,7 +51,34 @@ else()
       message(STATUS "Found getrandom in sys/random.h")
       target_compile_definitions(Core PRIVATE R__GETRANDOM_CLIB)
     else()
-      message(FATAL_ERROR "Fail to detect cryptographic random generator")
+      CHECK_CXX_SOURCE_RUNS("
+      #include <fstream>
+
+      int main() {
+          std::ifstream urandom{\"/dev/urandom\"};
+          if (!urandom) {
+              // This will make the CMake command fail
+              return 1;
+          }
+      
+          constexpr int len{32};
+          char buf[len];
+          for (int n = 0; n < len; n++) buf[n] = 0;
+          urandom.read(buf, len);
+      
+          int nmatch = 0;
+          for (int n = 0; n < len; n++)
+              if (buf[n] == 0) nmatch++;
+      
+          // Fail if no values have changed
+          return nmatch != len ? 0 : 1;
+      }" found_urandom)
+      if(found_urandom)
+        message(STATUS "Found random device in /dev/urandom")
+        target_compile_definitions(Core PRIVATE R__USE_URANDOM)
+      else()
+        message(FATAL_ERROR "Fail to detect cryptographic random generator")
+      endif()
     endif()
   endif()
 endif()
diff --git a/core/unix/src/TUnixSystem.cxx b/core/unix/src/TUnixSystem.cxx
index 2ad9eb2b8a..8e8c799b2f 100644
--- a/core/unix/src/TUnixSystem.cxx
+++ b/core/unix/src/TUnixSystem.cxx
@@ -744,6 +744,12 @@ Int_t TUnixSystem::GetCryptoRandom(void *buf, Int_t len)
    return len;
 #elif defined(R__GETRANDOM_CLIB)
    return getrandom(buf, len, GRND_NONBLOCK);
+#elif defined(R__USE_URANDOM)
+   std::ifstream urandom{"/dev/urandom"};
+   if (!urandom)
+      return -1;
+   urandom.read(reinterpret_cast<char *>(buf), len);
+   return len;
 #else
 #error "Reliable cryptographic random function not defined"
    return -1;
-- 
2.44.0


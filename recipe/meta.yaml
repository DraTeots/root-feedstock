{% set name = "root" %}
{% set version = "6.24.0" %}
{% set build_number = 0 %}
{% set build_number = datetime.datetime.utcnow().strftime('%H%M%S') %}
{% set clang_version = "9.0.1" %}
{% set clang_patches_version = "cling_master" %}

{%- if "ROOT_CONDA_GIT_REV" in os.environ %}
  {% set clang_patches_version = "root_" + os.environ["ROOT_CONDA_GIT_REV"] %}
{%- endif %}

{%- if "ROOT_CONDA_BUILD_NUMBER" in os.environ %}
   {%- set version = "6.25.0" %}
   {%- set build_number = os.environ["ROOT_CONDA_BUILD_NUMBER"] %}
{%- endif %}

package:
  name: root_base
  version: {{ version }}

source:
# {%- if "ROOT_CONDA_GIT_REV" in os.environ %}
#   git_url: {{ os.environ.get("ROOT_CONDA_GIT_URL", "https://github.com/root-project/root.git") }}
#   git_rev: {{ os.environ["ROOT_CONDA_GIT_REV"] }}
# {%- else %}
  git_url: https://github.com/root-project/root.git
  git_rev: master
  # url: https://github.com/root-project/root/archive/v{{ '-'.join(version.split('.')[:-1] + [version.split('.')[-1].rjust(2, '0')]) }}.tar.gz
  # sha256: 81fe6403a3cf51bb1c411f240d9c233473a833e5738b3abf68ed55d0d27ce1cd
# {%- endif %}
  folder: root-source
  patches:
    - patches/root-x.xx.xx_cling-runtime-sysroot.patch
    - patches/root-x.xx.xx-copy-abspath-headers.patch  # [osx]
    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]
    - patches/0001-Hacks.patch
    # - 0001-Add-missing-libs.patch
    - 0001-Support-standalone-pyroot.patch

build:
  number: {{ build_number }}
  skip: True  # [win or ppc64le]
  # string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}
  ignore_prefix_files:
    - lib/*.pcm            # [not aarch64]
    # https://github.com/root-project/root/blob/975be1e7647098ee8db5333f0769fb12287d0f75/cmake/modules/RootBuildOptions.cmake#L328-L332
    - etc/allDict.cxx.pch  # [aarch64]
  ignore_run_exports_from:
    - clangdev

requirements:
  build:
{%- if "ROOT_CONDA_USE_CCACHE" in os.environ %}
    - ccache
{%- endif %}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - git
    - pkg-config
    - sed
    - make
    # Required for OpenGL support
    # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
  host:
    - libblas
    - libcblas
    - {{ compiler('c') }}  # [linux]
    - {{ compiler('cxx') }}  # [linux]
    - afterimage
    - cfitsio
    - clangdev ={{ clang_version }}  # [not (osx and arm64)]
    # - cling
    # FIXME: Clad should use build strings
    # - clad =*=hd7828ce_0
    - davix
    - fftw
    - freetype
    - ftgl
    - gdk-pixbuf
    - giflib
    - glew
    - gl2ps
    - graphviz  # [not (osx and arm64)]
    - gsl
    - libglu  # [linux]
    - libpng
    - librsvg
    - libtiff
    - libxml2
    - llvm =9  # [not (osx and arm64)]
    - llvmdev =9  # [not (osx and arm64)]
    - lz4-c
    # - mysql
    - nlohmann_json
    - openssl
    - pcre
    # - postgresql
    - pythia8
    - sqlite
    - tbb
    - tbb-devel
    - vdt
    - xorg-libx11  # [linux]
    - xorg-libxau  # [linux]
    - xorg-libxcursor  # [linux]
    - xorg-libxext  # [linux]
    - xorg-libxfixes  # [linux]
    - xorg-libxft  # [linux]
    - xorg-libxpm  # [linux]
    - xrootd
    - xz
    # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used
    - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
    - xxhash
    - zlib
    - zstd
  run:
    # FIXME: Required to ensure a consistent etc/allDict.cxx.pch
    - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ pin_compatible('xxhash', max_pin='x.x.x') }}
    # - cling
    - nlohmann_json
    - cffi
    - sysroot_linux-64  # [linux]
    - xorg-libx11  # [linux]
    - xorg-libxext  # [linux]
    - xorg-libxpm  # [linux]
    - xorg-libxft  # [linux]
    - libglu  # [linux]
    - graphviz
  run_constrained:
    # Items listed here conflict with ROOT
    - cling 9999
    - root5 9999
    - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default("10.9") }}  # [osx]

test:
  files:
    - test.cpp
    - test_pyroot.py
  # requires:
  #   - ipython
  # imports:
  #   - ROOT
  #   - JupyROOT
  #   - JsMVA
  commands:
    - root -l -b -q -x
    - root -l -b -q -x test.cpp
    # When testing with -e, explicitly set the return code to zero
    - root -b -l -q -x -e '2+3; 0'
    - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'
    - echo ${CONDA_BUILD_SYSROOT}  # [osx]
    # # There should be no hard coded references to the SDK
    # Check the thisroot scripts work
    # - thisroot.sh
    # - thisroot.csh
    # - thisroot.fish
    # Test if OpenGL is working
    - root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error("OpenGL does not appear to be working"); }'
    # This test will fail due to lack of graphics support but try it anyway
    # It should exit with "TEveException: TEveManager::Create ROOT is running in batch mode."
    - root -b -l -q -x "${PREFIX}/tutorials/eve/geom_lhcb.C" || true
    # This tutorial uses davix to access a ROOT file over HTTP
    - root -b -l -q -x "${PREFIX}/tutorials/tree/run_h1analysis.C"
    # - XrdSecPROTOCOL=unix python -c "import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())"
    # - python test_pyroot.py  # [not (osx and arm64)]
    # - ipython -c 'import JsMVA'
    # This command only works if the compilers are available
    - root -l -b -q -x test.cpp++

outputs:
  - name: root_base
    build:
      number: {{ build_number }}
      # string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}
      # run_exports:
      #   # https://abi-laboratory.pro/?view=timeline&l=root
      #   - {{ pin_subpackage('root_base', max_pin='x.x') }}
      ignore_prefix_files:
        - lib/*.pcm            # [not aarch64]
        # https://github.com/root-project/root/blob/975be1e7647098ee8db5333f0769fb12287d0f75/cmake/modules/RootBuildOptions.cmake#L328-L332
        - etc/allDict.cxx.pch  # [aarch64]
      script:
        - set -x
        - cd build-dir
        - make install
  - name: pyroot
    build:
      number: {{ build_number }}
      script:
        - set -x
        - mkdir "pyroot-$PY_VER-build-dir"
        - cd "pyroot-$PY_VER-build-dir"
        - |
          cmake \
            ../root-source/bindings \
            -DPython_EXECUTABLE=${PYTHON} \
            -DCMAKE_INSTALL_PREFIX=${PREFIX} \
            -Ddataframe=ON \
            -Dstandalone_pyroot=ON
        - make -j${CPU_COUNT}
        - make install
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - make
      host:
        - {{ pin_subpackage('root_base', exact=True) }}
        - python
        - numpy
        - nlohmann_json
      run:
        - {{ pin_subpackage('root_base', exact=True) }}
        - python
        - {{ pin_compatible('numpy') }}
    test:
      # files:
      #   - test_pyroot.py
      imports:
        - ROOT
      # commands:
      #   - python test_pyroot.py  # [not (osx and arm64)]
  - name: root
    build:
      number: {{ build_number }}
    requirements:
      host:
        - {{ pin_subpackage('root_base', exact=True) }}
        - {{ pin_subpackage('pyroot', exact=True) }}
        - python
      run:
        - {{ pin_subpackage('root_base', exact=True) }}
        - {{ pin_subpackage('pyroot', exact=True) }}
        - python
        - compilers  # This package is hostile to how conda-build manages compilers
        - metakernel
        - ipython
        - notebook
        # # Numba doesn't yet support Python 3.9
        # # https://github.com/conda-forge/numba-feedstock/pull/61#issuecomment-708913681
        - numba  # [not (osx and arm64)]
    test:
      files:
        - test.cpp
        - test_pyroot.py
      imports:
        - ROOT
        - JupyROOT
      commands:
        - ipython -c "import JsMVA"
        - python test_pyroot.py  # [not (osx and arm64)]
        - root -l -b -q -x test.cpp
        - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'
        - root -b -l -q -x "${PREFIX}/tutorials/eve/geom_lhcb.C" || true
        - root -b -l -q -x "${PREFIX}/tutorials/tree/run_h1analysis.C"
        - root -l -b -q -x test.cpp++
  - name: root-nightly
    build:
      number: {{ build_number }}
    requirements:
      host:
        - {{ pin_subpackage('root', exact=True) }}
        - python
      run:
        - {{ pin_subpackage('root', exact=True) }}
        - python

about:
  home: https://root.cern/
  license: LGPL-2.1-only
  license_family: LGPL
  license_file: root-source/LICENSE
  doc_url: https://root.cern/documentation
  dev_url: https://github.com/root-project/root/
  summary: |
      ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data
      processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other
      languages such as Python and R.
  description: |
      Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned
      on. Here are a few things to try:

      * `root`: you can start up a session and see the splash screen; Control-D to exit.
      * `python` followed by `import ROOT` will load PyROOT.
      * `root --notebook` will start a notebook server with a ROOT kernel choice.
      * `rootbrowse` will open a TBrowser session so you can look through files.
      * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.
      * `root -b -q -l -n -e "std::cout << TROOT::GetTutorialDir() << std::endl;"` will print the tutorial dir.
      * `root -b -l -q -e 'std::cout << (float) TPython::Eval("1+1") << endl;'` will run Python from C++ ROOT.

      See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.

      The ROOT package will prepare the required compilers. Everything in Conda is symlinked into
      `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`
      scripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.

      There is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid
      having a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.
      In most cases users should use the `root` package directly, since it adds both of these, along with compilers,
      Jupyter, and a few other things to facilitate using ROOT or PyROOT.

      ROOT was built with and will report `-std=c++17` from `root-config`.

extra:
  recipe-maintainers:
    - chrisburr
    - henryiii
    - eguiraud
    - egpbos
